<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MeelGroup</title>
    <link>https://meelgroup.github.io/</link>
      <atom:link href="https://meelgroup.github.io/index.xml" rel="self" type="application/rss+xml" />
    <description>MeelGroup</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2019</copyright><lastBuildDate>Thu, 28 Jun 2018 00:00:00 +0100</lastBuildDate>
    <image>
      <url>https://meelgroup.github.io/images/icon_hu1dd832c4da814f17fe02e3737f0ae144_14882_512x512_fill_lanczos_center_2.png</url>
      <title>MeelGroup</title>
      <link>https://meelgroup.github.io/</link>
    </image>
    
    <item>
      <title>&lt;b&gt;Our work on A Scalable Shannon Entropy Estimator is accepted to  &lt;a href=&#34;http://i-cav.org/2022/&#34;&gt;CAV-22&lt;/a&gt;.&lt;/b&gt; &lt;br&gt; We propose the first efficient algorithmic technique to estimate the Shannon entropy of a specification with PAC-style guarantees, i.e., the computed estimate is guaranteed to lie within a (1 ± ε)-factor of the ground truth with confidence at least 1−δ. &lt;br&gt;Authors:  Priyanka Golia, Brendan Juba, Kuldeep S. Meel&lt;br&gt; </title>
      <link>https://meelgroup.github.io/talk/09052022/</link>
      <pubDate>Mon, 09 May 2022 13:15:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/09052022/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Scalable Shannon Entropy Estimator</title>
      <link>https://meelgroup.github.io/publication/cav22/</link>
      <pubDate>Mon, 09 May 2022 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/cav22/</guid>
      <description></description>
    </item>
    
    <item>
      <title>On Quantitative Testing of Samplers</title>
      <link>https://meelgroup.github.io/publication/cp22/</link>
      <pubDate>Mon, 09 May 2022 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/cp22/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Our work On Quantitative Testing of Samplers has been accepted to  &lt;a href=&#34;https://cp2022.a4cp.org&#34;&gt;CP-22&lt;/a&gt;.&lt;/b&gt; &lt;br&gt; We design a computational hardness-based tester, called ScalBarbarik that provides a qunatitative way to analysis the quality of a sampler.&lt;br&gt; Authors: Mate Soos, Priyanka Golia, Sourav Chakraborty, Kuldeep S. Meel&lt;br&gt; </title>
      <link>https://meelgroup.github.io/talk/08052022/</link>
      <pubDate>Sun, 08 May 2022 13:15:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/08052022/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Our paper on &#34;Efficient Learning of Interpretable Classification Rules&#34; is accepted to &lt;a href=&#34;https://www.jair.org/index.php/jair&#34;&gt;JAIR&lt;/a&gt; journal.&lt;/b&gt;&lt;br&gt; Authors: Bishwamittra Ghosh, Dmitry Malioutov and Kuldeep S. Meel</title>
      <link>https://meelgroup.github.io/talk/21122021/</link>
      <pubDate>Tue, 21 Dec 2021 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/21122021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Our paper “A Scalable t-wise Coverage Estimator” is accepted to. &lt;a href=&#34;https://conf.researchr.org/home/icse-2022&#34;&gt; ICSE 2022&lt;/a&gt;.&lt;/b&gt;&lt;br&gt; Authors: Eduard Baranov, Sourav Chakraborty, Axel Legay, Kuldeep S. Meel, and N.V. Vinodchandran</title>
      <link>https://meelgroup.github.io/talk/03122021/</link>
      <pubDate>Fri, 03 Dec 2021 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/03122021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Three Papers accepted to &lt;a href=&#34;https://aaai.org/Conferences/AAAI-22/&#34;&gt;AAAI 2022&lt;/a&gt;.&lt;/b&gt; &lt;br&gt;1. The first paper is on Algorithmic Fairness Verification with Graphical Models. &lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;  Authors: Bishwamittra Ghosh, Debabrota Basu and Kuldeep S. Meel&lt;/br&gt; 2. The second paper is ApproxASP - A Scalable Approximate Answer Set Counter. &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Authors: Mohimenul Kabir , Flavio Everardo, Ankit Shukla, Johannes K. Fichte, Markus Hecher and Kuldeep Meel&lt;/br&gt; 3. The third paper is on Constraint-Driven Explanations for Black Box ML Models. &lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; Authors: Aditya Shrotri, Nina Narodytska, Alexey Ignatiev, Joao Marques-Silva, Kuldeep S. Meel and Moshe Vardi</title>
      <link>https://meelgroup.github.io/talk/02122021/</link>
      <pubDate>Thu, 02 Dec 2021 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/02122021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Gaussian Elimination Meets Maximum Satisfiability</title>
      <link>https://meelgroup.github.io/publication/kr21/</link>
      <pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/kr21/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Testing Probabilistic Circuits</title>
      <link>https://meelgroup.github.io/publication/neurips21_teq/</link>
      <pubDate>Sun, 07 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/neurips21_teq/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Our paper on &lt;a href=&#34;https://meelgroup.github.io/files/publications/NeurIPS21_PCtest.pdf&#34;&gt;Testing of Probabilistic Cirucits&lt;/a&gt; is accepted to &lt;a href=&#34;https://nips.cc/&#34;&gt;NeurIPS 2021&lt;/a&gt;.&lt;/b&gt;&lt;br&gt; Authors: Yash Pote and Kuldeep S. Meel</title>
      <link>https://meelgroup.github.io/talk/07112021/</link>
      <pubDate>Sun, 07 Nov 2021 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/07112021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Congratulations to Teodora Baluta for winning the &lt;a href=&#34;https://research.google/outreach/phd-fellowship/recipients/?category=2021&#34;&gt;Google PhD Fellowship&lt;/a&gt;.&lt;/b&gt;</title>
      <link>https://meelgroup.github.io/talk/24092021/</link>
      <pubDate>Sat, 30 Oct 2021 14:15:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/24092021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Engineering an Efficient PB-XOR Solver</title>
      <link>https://meelgroup.github.io/publication/cp21/</link>
      <pubDate>Wed, 28 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/cp21/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Our paper on &lt;a href=&#34;https://meelgroup.github.io/files/publications/CP21.pdf&#34;&gt;Engineering an Efficient PB-XOR Solver&lt;/a&gt; is accepted to &lt;a href=&#34;https://cp2021.a4cp.org/&#34;&gt;CP 2021&lt;/a&gt;.&lt;/b&gt;&lt;br&gt; Authors: Jiong Yang and Kuldeep S. Meel</title>
      <link>https://meelgroup.github.io/talk/28072021/</link>
      <pubDate>Wed, 28 Jul 2021 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/28072021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Our paper Engineering an Efficient Boolean Functional Synthesis Engine has been accepted to &lt;a href=&#34;https://www.iccad.com/index.php&#34;&gt;ICCAD 2021&lt;/a&gt;.&lt;/b&gt; &lt;br&gt; The work addresses scalability barriers faced by the current state-of-the-art synthesis techniques. We propose four algorithmic improvements for a data-driven framework for functional synthesis.&lt;br&gt; Authors:  Priyanka Golia, Friedrich Slivovsky, Subhajit Roy, Kuldeep S. Meel&lt;br&gt; </title>
      <link>https://meelgroup.github.io/talk/14072021/</link>
      <pubDate>Wed, 14 Jul 2021 14:15:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/14072021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Engineering an Efficient Boolean Functional Synthesis Engine</title>
      <link>https://meelgroup.github.io/publication/iccad21/</link>
      <pubDate>Tue, 13 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/iccad21/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Our paper Designing Samplers is Easy: The Boon of Testers has been accepted to &lt;a href=&#34;https://fmcad.org/FMCAD21/&#34;&gt;FMCAD 2021&lt;/a&gt;.&lt;/b&gt; &lt;br&gt; Our Sampler not only passes the tests of Barbarik but also leads to significant performance improvements for real-world instances. &lt;br&gt; Authors: Priyanka Golia, Mate Soos, Sourav Chakraborty, Kuldeep S. Meel&lt;br&gt; </title>
      <link>https://meelgroup.github.io/talk/09072021/</link>
      <pubDate>Fri, 09 Jul 2021 14:15:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/09072021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Designing Samplers is Easy: The Boon of Testers</title>
      <link>https://meelgroup.github.io/publication/fmcad21/</link>
      <pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/fmcad21/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Our work on MaxSAT augmented with Gauss Jordan Elimination is accepted to &lt;a href=&#34;https://kr2021.kbsg.rwth-aachen.de/&#34;&gt;KR2021&lt;/a&gt;.&lt;/b&gt; &lt;br&gt; Authors: Mate Soos and Kuldeep S. Meel&lt;br&gt; </title>
      <link>https://meelgroup.github.io/talk/15062021/</link>
      <pubDate>Tue, 15 Jun 2021 14:15:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/15062021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Our work on GPU-based Parallel SAT solving is accepted to &lt;a href=&#34;https://www.iiia.csic.es/sat2021/program/&#34;&gt;SAT 2021&lt;/a&gt;.&lt;/b&gt;&lt;br&gt; Authors: Nicolas Prevot, Mate Soos, and Kuldeep S. Meel&lt;br&gt; </title>
      <link>https://meelgroup.github.io/talk/04052021/</link>
      <pubDate>Tue, 04 May 2021 14:15:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/04052021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Counting Minimal Unsatisfiable Subsets</title>
      <link>https://meelgroup.github.io/publication/cav21_mus/</link>
      <pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/cav21_mus/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Leveraging GPUs for Effective Clause Sharing in Parallel SAT Solving</title>
      <link>https://meelgroup.github.io/publication/sat21_gpu/</link>
      <pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/sat21_gpu/</guid>
      <description></description>
    </item>
    
    <item>
      <title>On the Usefulness of Linear Modular Arithmetic in Constraint Programming</title>
      <link>https://meelgroup.github.io/publication/cpaior21_linmodar/</link>
      <pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/cpaior21_linmodar/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Partition Function Estimation: A Quantitative Study</title>
      <link>https://meelgroup.github.io/publication/ijcai21_partition/</link>
      <pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/ijcai21_partition/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Our paper on Program Synthesis as Dependency Quantified Formula Modulo Theory has been accepted to &lt;a href=&#34;https://ijcai-21.org/&#34;&gt;IJCAI 2021&lt;/a&gt;.&lt;/b&gt; &lt;br&gt;We show that theory-constrained synthesis can be reduced DQF(T), i.e., to the problem of finding a witness of a dependency quantified formula modulo theory. &lt;br&gt; Authors: Priyanka Golia, Subhajit Roy, Kuldeep S. Meel&lt;br&gt; </title>
      <link>https://meelgroup.github.io/talk/30042021/</link>
      <pubDate>Fri, 30 Apr 2021 14:15:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/30042021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Program Synthesis as Dependency Quantified Formula Modulo Theory</title>
      <link>https://meelgroup.github.io/publication/ijcai21_programsynthesis/</link>
      <pubDate>Fri, 30 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/ijcai21_programsynthesis/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Our work on Counting Minimal Unsatisfiable Subsets is accepted to  &lt;a href=&#34;http://i-cav.org/2021/&#34;&gt;CAV 2021&lt;/a&gt;.&lt;/b&gt; &lt;br&gt; Authors: Jaroslav Bendik and Kuldeep S. Meel&lt;br&gt; </title>
      <link>https://meelgroup.github.io/talk/21042021/</link>
      <pubDate>Wed, 21 Apr 2021 14:15:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/21042021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Kuldeep presented a talk on the rise of model counting at the &lt;a href=&#34;https://ml-logic-seminar.github.io/&#34;&gt;Data and Knowledge Seminar at Oxford&lt;/a&gt;.</title>
      <link>https://meelgroup.github.io/talk/20042021/</link>
      <pubDate>Tue, 20 Apr 2021 14:15:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/20042021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Our paper Partition Function Estimation: A Quantitative Study has been accepted to &lt;a href=&#34;https://ijcai-21.org/&#34;&gt;IJCAI 2021 Survey Track&lt;/a&gt;.&lt;/b&gt; &lt;br&gt;This paper presents a survey of 17 partition function estimation techniques and a rigorous empirical study of their behavior across an extensive set of benchmarks.&lt;br&gt; Authors: Durgesh Agrawal, Yash Pote, and Kuldeep S. Meel&lt;br&gt; </title>
      <link>https://meelgroup.github.io/talk/19042021/</link>
      <pubDate>Mon, 19 Apr 2021 14:15:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/19042021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Kuldeep gave a talk on Formal Methods&#43;Machine Learning at &lt;a href=&#34;https://cci.usc.edu/index.php/2021/04/13/4863/&#34;&gt;CCI MHI Seminars at USC&lt;/a&gt;.&lt;/b&gt;</title>
      <link>https://meelgroup.github.io/talk/15042021/</link>
      <pubDate>Thu, 15 Apr 2021 14:15:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/15042021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Our work on computation of union of sets in streaming model is accepted to  &lt;a href=&#34;https://2021.sigmod.org/calls_papers_pods_research.shtml&#34;&gt;PODS-21&lt;/a&gt;.&lt;/b&gt; &lt;br&gt; Authors: Kuldeep S. Meel, N.V.Vinodchandran, and Sourav Chakraborty &lt;br&gt; </title>
      <link>https://meelgroup.github.io/talk/02042021/</link>
      <pubDate>Fri, 02 Apr 2021 14:15:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/02042021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Kuldeep gave a talk on Formal Methods&#43;Machine Learning at the &lt;a href=&#34;https://madpl.cs.wisc.edu/pl-seminar/&#34;&gt;PL Seminar at University of Wisconsin&lt;/a&gt;.&lt;/b&gt;</title>
      <link>https://meelgroup.github.io/talk/24032021/</link>
      <pubDate>Wed, 24 Mar 2021 14:15:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/24032021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Kuldeep gave a talk on Formal Methods&#43;Machine Learning at &lt;a href=&#34;https://ml-logic-seminar.github.io/&#34;&gt;Waterloo&amp;apos;s ML&#43;Logic Seminar&lt;/a&gt;.&lt;/b&gt;</title>
      <link>https://meelgroup.github.io/talk/15032021/</link>
      <pubDate>Mon, 15 Mar 2021 14:15:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/15032021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Our work on Linear Modular Arithmetic in CP is accepted to  &lt;a href=&#34;https://cpaior2021.dbai.tuwien.ac.at/&#34;&gt;CPAIOR-21&lt;/a&gt;.&lt;/b&gt; &lt;br&gt; Authors: Gilles Pesant, Kuldeep S. Meel, and Mahshid Mohammadalitajrishi&lt;br&gt; </title>
      <link>https://meelgroup.github.io/talk/13032021/</link>
      <pubDate>Sat, 13 Mar 2021 14:15:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/13032021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Kuldeep will present a talk on synthesis at the &lt;a href=&#34;https://citris-uc.org/event/cpar-seminar-series-kuldeep-meel/&#34;&gt;CITRIS People and Robotics seminar&lt;/a&gt;.&lt;/b&gt;</title>
      <link>https://meelgroup.github.io/talk/01032021/</link>
      <pubDate>Mon, 01 Mar 2021 14:15:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/01032021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Estimating the Size of Unions of Sets in Streaming Models</title>
      <link>https://meelgroup.github.io/publication/pods21_union/</link>
      <pubDate>Thu, 18 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/pods21_union/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Model Counting meets F0 Estimation</title>
      <link>https://meelgroup.github.io/publication/pods21_f0/</link>
      <pubDate>Thu, 18 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/pods21_f0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Kuldeep will be giving an in-depth talk on the rise of approximate model counting at Simons Workshop on Beyond Satisfiability. &lt;a href=&#34;https://simons.berkeley.edu/talks/tbd-257&#34;&gt;Recorded video &lt;/a&gt;.</title>
      <link>https://meelgroup.github.io/talk/09022021/</link>
      <pubDate>Tue, 09 Feb 2021 14:15:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/09022021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Kuldeep will be giving an introductory talk on &lt;a href=&#34;https://simons.berkeley.edu/talks/pseudo-boolean-solving-and-optimization&#34;&gt;Approximate Counting and Sampling &lt;/a&gt; at Simons Bootcamp for Program on Satisfiability.</title>
      <link>https://meelgroup.github.io/talk/05022021/</link>
      <pubDate>Fri, 05 Feb 2021 14:15:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/05022021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Scalable Quantitative Verification For Deep Neural Networks</title>
      <link>https://meelgroup.github.io/publication/icse21/</link>
      <pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/icse21/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Counting Maximal Satisfiable Subsets</title>
      <link>https://meelgroup.github.io/publication/aaai21_mss/</link>
      <pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/aaai21_mss/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Justicia A Stochastic SAT Approach to Formally Verify Fairness</title>
      <link>https://meelgroup.github.io/publication/aaai21_justicia/</link>
      <pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/aaai21_justicia/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Predicting Forest Fire Using Remote Sensing Data And Machine Learning</title>
      <link>https://meelgroup.github.io/publication/aaai21_forest/</link>
      <pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/aaai21_forest/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Symmetric Component Caching for Model Counting on Structured Instances</title>
      <link>https://meelgroup.github.io/publication/aaai21_symganak/</link>
      <pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/aaai21_symganak/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Power of Literal Equivalence in Model Counting</title>
      <link>https://meelgroup.github.io/publication/aaai21_exactmc/</link>
      <pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/aaai21_exactmc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Join, from the comfort of your home, our tutorial on &lt;a href=&#34;https://alexeyignatiev.github.io/ijcai20-tutorial/&#34;&gt;Logic-Enabled Verification and Explanation of ML Models&lt;/a&gt; at IJCAI-21.</title>
      <link>https://meelgroup.github.io/talk/08012021/</link>
      <pubDate>Fri, 08 Jan 2021 14:15:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/08012021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Our paper on scalable quantitative verification for deep neural networks has been accepted to &lt;a href=&#34;https://conf.researchr.org/home/icse-2021&#34;&gt;ICSE 2021&lt;/a&gt;.&lt;/b&gt; &lt;br&gt;We give a sampling-based approach for quantifying properties for deep neural networks and an attack-agnostic metric called adversarial hardness to capture a model&amp;apos;s robustness. &lt;br&gt; Authors: Teodora Baluta, Zheng Leong Chua, Kuldeep S. Meel and Prateek Saxena &lt;br&gt; </title>
      <link>https://meelgroup.github.io/talk/17122020/</link>
      <pubDate>Thu, 17 Dec 2020 14:15:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/17122020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;We will be presenting three papers at &lt;a href=&#34;https://nips.cc/virtual/2020/public/cal_main.html&#34;&gt;NeurIPS-20&lt;/a&gt;.&lt;/b&gt; &lt;br&gt;1. The [first paper](https://arxiv.org/abs/2002.05378) focuses on efficient distance approximation in high dimension distributions. We propose an amazingly simple method that can compute L1 distance with rigorous guarantees. Come [Poster Session 5](https://neurips.cc/virtual/2020/public/poster_a8acc28734d4fe90ea24353d901ae678.html) on Thursday. &lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; Joint work with A. Bhattacharya, S. Gayen, and N.V. Vinodchandran &lt;br&gt;2. The [second paper](https://arxiv.org/abs/2010.12918) provides the first scalable method to test samplers in practice. Barbarik can now test samplers that sample from log-linear models. If you propose a sampling technique but can&amp;apos;t prove its correctness, you can now use Barbarik to check its quality. Just the way we use testing for our software. ([Poster](https://t.co/zRZVsPZNka?amp=1)) &lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; Joint work with S. Chakraborty and Y. Pote &lt;br&gt;3. The [third paper](https://arxiv.org/abs/2010.10724) seeks to tame discrete integration with the boon of dimensionality (Yes, the boon not the curse). We extended our IJCAI-15&amp;apos;s work of weighted to unweighted counting (thereby increasing the dimensionality) to handle rational weights. ([Poster](https://t.co/J4rYz0j8Vh?amp=1)) &lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; Joint work with J.M. Dudek and D. Fried</title>
      <link>https://meelgroup.github.io/talk/05122020/</link>
      <pubDate>Sat, 05 Dec 2020 14:15:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/05122020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;All the five papers from our group were accepted to &lt;a href=&#34;https://aaai.org/Conferences/AAAI-21/&#34;&gt;AAAI 2021&lt;/a&gt;.&lt;/b&gt; &lt;br&gt;1. Justicia: A Stochastic SAT Approach to Formally Verify Fairness &lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;  Authors: Bishwamittra Ghosh, Debabrota Basu, and Kuldeep S Meel &lt;br&gt;2. Predicting Forest Fire Using Remote Sensing Data And Machine Learning &lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;  Authors: Suwei Yang, Massimo Lupascu, and Kuldeep S Meel &lt;br&gt;3.  Symmetric Component Caching for Model Counting on Structured Instances &lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; Authors: Timothy van Bremen,  Vincent Derkinderen,  Shubham Sharma, Subhajit Roy, and Kuldeep S Meel &lt;br&gt; 4. Counting Maximal Satisfiable Subsets &lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; Authors: Jaroslav Bendik and Kuldeep S. Meel &lt;br&gt;5. The Power of Literal Equivalence in Model Counting &lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; Authors: Yong Lai, Kuldeep S Meel, and Roland Yap</title>
      <link>https://meelgroup.github.io/talk/02122020/</link>
      <pubDate>Wed, 02 Dec 2020 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/02122020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Baital: An Adaptive Weighted Sampling Approach for Improved t-wise Coverage</title>
      <link>https://meelgroup.github.io/publication/fse20/</link>
      <pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/fse20/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Efficient Distance Approximation for Structured High-Dimensional Distributions via Learning</title>
      <link>https://meelgroup.github.io/publication/neurips20_approx/</link>
      <pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/neurips20_approx/</guid>
      <description></description>
    </item>
    
    <item>
      <title>On Testing of Samplers</title>
      <link>https://meelgroup.github.io/publication/neurips20_testing/</link>
      <pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/neurips20_testing/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Taming Discrete Integration via the Boon of Dimensionality</title>
      <link>https://meelgroup.github.io/publication/neurips20_taming/</link>
      <pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/neurips20_taming/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Three Papers accepted to &lt;a href=&#34;https://nips.cc/&#34;&gt;NeurIPS 2020&lt;/a&gt;.&lt;/b&gt; &lt;br&gt;1. The first paper on &lt;a href=&#34;https://arxiv.org/abs/2010.12918&#34;&gt;On Testing of Samplers&lt;/a&gt;. &lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;  Authors: Kuldeep S Meel, Yash Pralhad Pote and Sourav Chakraborty&lt;/br&gt; 2. The second paper on &lt;a href=&#34;https://arxiv.org/abs/2010.10724&#34;&gt;Taming Discrete Integration via the Boon of Dimensionality&lt;/a&gt;. &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Authors: Jeffrey M. Dudek, Dror Fried and Kuldeep S. Meel&lt;/br&gt; 3. The third paper on &lt;a href=&#34;https://arxiv.org/abs/2002.05378&#34;&gt;Efficient Distance Approximation for Structured High-Dimensional Distributions via Learning&lt;/a&gt;. &lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; Authors: Arnab Bhattacharyya, Sutanu Gayen, Kuldeep S. Meel and N. V. Vinodchandran</title>
      <link>https://meelgroup.github.io/talk/25092020/</link>
      <pubDate>Fri, 25 Sep 2020 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/25092020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Our Paper on Model Counting meets F0 Estimation (public version forthcoming!) is accepted to &lt;a href=&#34;https://2021.sigmod.org/&#34;&gt;PODS 2021&lt;/a&gt;.&lt;/b&gt;&lt;br&gt; Authors: Arnab Bhattacharyya, Kuldeep Meel, A. Pavan and N.V. Vinodchandran</title>
      <link>https://meelgroup.github.io/talk/18092020/</link>
      <pubDate>Fri, 18 Sep 2020 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/18092020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt; We [presented](https://www.youtube.com/watch?v=vCc6jpOm04Y&amp;feature=youtu.be) our work on [Phase Transition Behaviour in Knowledge Compilation](https://arxiv.org/abs/2007.10400) at &lt;a href=&#34;https://cp2020.a4cp.org/&#34;&gt;CP 2020&lt;/a&gt;.&lt;/b&gt;</title>
      <link>https://meelgroup.github.io/talk/10092020/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/10092020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt; We presented three papers at [CAV 2020](http://i-cav.org/2020/). &lt;/b&gt; &lt;br&gt; 1. The first paper builds on our CNF-XOR solving paradigm (BIRD) and as a result, the new versions of [ApproxMC and UniGen](https://www.comp.nus.edu.sg/~meel/Papers/cav20-sgm.pdf) are faster than ever. &lt;br&gt; 2. The second paper proposes the first algorithm for [approximate MUS counting](https://www.comp.nus.edu.sg/~meel/Papers/cav20-bm.pdf). &lt;br&gt; 3. The third one proposes a data-driven approach for [Boolean functional synthesis](https://www.comp.nus.edu.sg/~meel/Papers/cav20-grm.pdf), which works at the intersection of constrained sampling, machine learning and automated reasoning.</title>
      <link>https://meelgroup.github.io/talk/22072020/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/22072020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;We have released the source code of [Manthan](https://github.com/meelgroup/manthan).&lt;/b&gt;</title>
      <link>https://meelgroup.github.io/talk/07072020/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/07072020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Phase Transition Behaviour in Knowledge Compilation</title>
      <link>https://meelgroup.github.io/publication/cp20/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/cp20/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Our Paper on &lt;a href=&#34;https://arxiv.org/abs/2007.10400&#34;&gt;Phase Transition Behaviour in Knowledge Compilation&lt;/a&gt; is accepted to &lt;a href=&#34;https://cp2020.a4cp.org/&#34;&gt;CP 2020&lt;/a&gt;.&lt;/b&gt;&lt;br&gt; Authors: Rahul Gupta, Subhajit Roy and Kuldeep S. Meel</title>
      <link>https://meelgroup.github.io/talk/08072020/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/08072020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;We have released [ApproxMC 4](https://github.com/meelgroup/approxmc).&lt;/b&gt;</title>
      <link>https://meelgroup.github.io/talk/13072020/</link>
      <pubDate>Tue, 07 Jul 2020 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/13072020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Designing New Phase Selection Heuristics</title>
      <link>https://meelgroup.github.io/publication/sat20sm/</link>
      <pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/sat20sm/</guid>
      <description></description>
    </item>
    
    <item>
      <title>On the Sparsity of XORs in Approximate Model Counting</title>
      <link>https://meelgroup.github.io/publication/sat20abm/</link>
      <pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/sat20abm/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Sparse Hashing for Scalable Approximate Model Counting: Theory and Practice</title>
      <link>https://meelgroup.github.io/publication/lics-20-am/</link>
      <pubDate>Mon, 18 May 2020 00:00:01 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/lics-20-am/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Approximate Counting of Minimal Unsatisfiable Subsets</title>
      <link>https://meelgroup.github.io/publication/cav20bm/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/cav20bm/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Manthan: A Data-Driven Approach for Boolean Function Synthesis</title>
      <link>https://meelgroup.github.io/publication/cav20_manthan/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/cav20_manthan/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Tinted, Detached, and Lazy CNF-XOR solving and its Applications to Counting and Sampling</title>
      <link>https://meelgroup.github.io/publication/cav20sgm/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/cav20sgm/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Induction Models on N</title>
      <link>https://meelgroup.github.io/publication/lpar20dms/</link>
      <pubDate>Sat, 16 May 2020 00:00:01 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/lpar20dms/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Two Papers accepted to &lt;a href=&#34;https://sat2020.idea-researchlab.org/&#34;&gt;SAT 2020&lt;/a&gt;.&lt;/b&gt; &lt;br&gt; 1. The first paper shows that the currently known bounds for sparse hashing are too weak to be used for algorithms such as ApproxMC. Authors: Durgesh Agarwal, Bhavishya and Kuldeep S. Meel &lt;br&gt; 2. The second paper proposes a new phase selection strategy for SAT solvers. Improving SAT solvers is just a very very hard job and we are excited about the improvements that our proposal brings to the world of SAT solving. Authors: Arijit Shaw and Kuldeep S. Meel</title>
      <link>https://meelgroup.github.io/talk/25042020/</link>
      <pubDate>Sat, 25 Apr 2020 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/25042020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Paper on Sparse Hashing for Approximate Model counting accepted to &lt;a href=&#34;https://lics.siglog.org/lics20/&#34;&gt;LICS 2020&lt;/a&gt;. Authors: S. Akshay and Kuldeep S. Meel &lt;/b&gt;&lt;br&gt;One of the reviews: &#34;Rarely it is that there is a paper that proves a beautiful new theoretical result, explaining and simplifying previous work, and on top of that shows how it can be used to improve state-of-the-art practical algorithms. The paper &#34;Sparse hashing for scalable approximate model counting: theory and practice&#34; achieves exactly that.&#34;</title>
      <link>https://meelgroup.github.io/talk/10042020/</link>
      <pubDate>Fri, 10 Apr 2020 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/10042020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Paper accepted to &lt;a href=&#34;https://easychair.org/smart-program/LPAR23/&#34;&gt;LPAR-23&lt;/a&gt;.&lt;/b&gt; &lt;br&gt;The paper formalizes Induction Models on N extending the classical work of Henkin. Authors: A Dileep, Kuldeep S. Meel and Ammar F. Sabili</title>
      <link>https://meelgroup.github.io/talk/08042020/</link>
      <pubDate>Wed, 08 Apr 2020 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/08042020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Three Papers accepted at &lt;a href=&#34;https://www.facebook.com/groups/cavconference/?fref=mentions&#34;&gt;Computer Aided Verification (CAV)&lt;/a&gt; 2020 conference.&lt;/b&gt;&lt;br&gt;1. The first paper proposes a new approach that combines sampling&#43;machine learning&#43;MaxSAT to achieve a significant progress in solving Boolean Functional Synthesis. Authors: Priyanka Golia, Subhajit Roy, and Kuldeep S. Meel&lt;br&gt;2. The second paper builds on our CNF-XOR solving paradigm (BIRD) and as a result, the new versions of ApproxMC and UniGen are faster than ever. Stay tuned for our releases. Authors: Mate Soos, Stephan Gocht, and Kuldeep S. Meel&lt;br&gt;3. The third paper proposes the first algorithm for approximate MUS counting. Authors: Jaroslav Bendik and Kuldeep S. Meel</title>
      <link>https://meelgroup.github.io/talk/06042020/</link>
      <pubDate>Mon, 06 Apr 2020 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/06042020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Study of Symmetry Breaking Predicates and Model Counting</title>
      <link>https://meelgroup.github.io/publication/tacas20wuawmk/</link>
      <pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/tacas20wuawmk/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Manthan</title>
      <link>https://meelgroup.github.io/project/manthan/</link>
      <pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/project/manthan/</guid>
      <description>&lt;p&gt;Boolean functional synthesis is a fundamental problem in computer science with wide-ranging applications and has witnessed a surge of interest resulting in progressively improved techniques over the past decade. Despite intense algorithmic development, a large number of problems remain beyond the reach of the state of the art techniques. Motivated by the progress in machine learning, we propose Manthan, a novel data-driven approach to Boolean functional synthesis. Manthan views functional synthesis as a classification problem, relying on advances in constrained sampling for data generation, and advances in automated reasoning for a novel proof-guided refinement and provable verification.&lt;/p&gt;
&lt;p&gt;Manthan significantly improves upon the current state of the art, solving 356 benchmarks in comparison to 280, which is the most solved by a state of the art technique; thereby, it demonstrate an increase of 76 benchmarks over the current state of the art. Furthermore, Manthan solves 60 benchmarks that none of the current state of the art techniques could solve.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>&lt;b&gt; Sampling-based approach for quantittive quantitative verification of Deep Neural Nets. &lt;/b&gt;&lt;br&gt;We propose a new attack agnostic metric adversarial hardness to capture the model&amp;apos;s robustness: &lt;a href=&#34;https://arxiv.org/pdf/2002.06864.pdf&#34;&gt;https://arxiv.org/pdf/2002.06864.pdf&lt;/a&gt;  Authors: Teodora Baluta, Zheng Leong Chua, Kuldeep S. Meel and Prateek Saxena.</title>
      <link>https://meelgroup.github.io/talk/18022020/</link>
      <pubDate>Tue, 18 Feb 2020 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/18022020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Alexey Ignatiev, Joao Marques-Silva, Kuldeep S. Meel and Nina Narodytska give a tutorial at the Tutorial Forum in AAAI&amp;apos;20: &lt;a href=&#34;https://aaai.org/Conferences/AAAI-20/aaai20tutorials/&#34;&gt;Rigorous Verification and Explanation of ML Models&lt;/a&gt;.&lt;/b&gt;</title>
      <link>https://meelgroup.github.io/talk/08022020/</link>
      <pubDate>Sat, 08 Feb 2020 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/08022020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>NPAQ</title>
      <link>https://meelgroup.github.io/project/npaq/</link>
      <pubDate>Sun, 26 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/project/npaq/</guid>
      <description>&lt;p&gt;Neural networks are increasingly employed in safety-critical domains. This has prompted interest in verifying or certifying logically encoded properties of neural networks. Prior work has largely focused on checking existential properties, wherein the goal is to check whether there exists any input that violates a given property of interest. However, neural network training is a stochastic process, and many questions arising in their analysis require probabilistic and quantitative reasoning, i.e., estimating how many inputs satisfy a given property. To this end, our paper proposes a novel and principled framework to quantitative verification of logical properties specified over neural networks. Our framework is the first to provide PAC-style soundness guarantees, in that its quantitative estimates are within a controllable and bounded error from the true count. We instantiate our algorithmic framework by building a prototype tool called NPAQ that enables checking rich properties over binarized neural networks. We show how emerging security analyses can utilize our framework in 3 applications: quantifying robustness to adversarial inputs, efficacy of trojan attacks, and fairness/bias of given neural networks.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Classification Rules in Relaxed Logical Form</title>
      <link>https://meelgroup.github.io/publication/ecai20/</link>
      <pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/ecai20/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&lt;b&gt;Our paper on classification rules in relaxed logical form is accepted in &lt;a href=&#34;http://ecai2020.eu&#34;&gt;ECAI-2020&lt;/a&gt;. Authors: Bishwamittra Ghosh, Dmitry Malioutov, and Kuldeep S. Meel&lt;/b&gt;</title>
      <link>https://meelgroup.github.io/talk/15012020/</link>
      <pubDate>Wed, 15 Jan 2020 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/15012020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A MaxSAT-based Framework for Group Testing</title>
      <link>https://meelgroup.github.io/publication/aaai20/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/aaai20/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Our paper on Symmetry breaking and model counting is accepted to &lt;a href=&#34;https://www.etaps.org/2020/tacas&#34;&gt;TACAS 2020&lt;/a&gt;. Authors: Wenxi Wang, Muhammad Usman, Alyas Almaawi, Kaiyuan Wang, Kuldeep S. Meel, and Sarfraz Khurshid</title>
      <link>https://meelgroup.github.io/talk/23122019/</link>
      <pubDate>Mon, 23 Dec 2019 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/23122019/</guid>
      <description></description>
    </item>
    
    <item>
      <title> Two of our group&amp;apos;s papers are accepted to accepted as poster presentations with a spotlight talk at &lt;a href=&#34;http://www.starai.org/2020/&#34;&gt;StarAI 2020&lt;/a&gt; workshop in &lt;a href=&#34;https://aaai.org/Conferences/AAAI-20/&#34;&gt;AAAI 2020&lt;/a&gt;: Our AIES-19 &lt;a href=&#34;https://bishwamittra.github.io/publication/imli-ghosh.pdf&#34;&gt;paper&lt;/a&gt; on incremental classification rule learning and our CCS-19 &lt;a href=&#34;https://www.comp.nus.edu.sg/~teodorab/papers/NPAQ.pdf&#34;&gt;paper&lt;/a&gt; on quantiatative verification for binarized neural networks.</title>
      <link>https://meelgroup.github.io/talk/07122019/</link>
      <pubDate>Sat, 07 Dec 2019 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/07122019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>CrystalBall: SAT solving, Data Gathering, and Machine Learning</title>
      <link>https://meelgroup.github.io/post/crystallball/</link>
      <pubDate>Sun, 03 Nov 2019 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/post/crystallball/</guid>
      <description>&lt;p&gt; &lt;/i&gt;Link to the  &lt;a href=&#34;https://www.msoos.org/2019/06/crystalball-sat-solving-data-gathering-and-machine-learning/&#34;&gt;original post&lt;/a&gt; on CrystallBall.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title> Embedding Symbolic Knowledge into Deep Networks </title>
      <link>https://meelgroup.github.io/publication/neurips19/</link>
      <pubDate>Mon, 30 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/neurips19/</guid>
      <description></description>
    </item>
    
    <item>
      <title> Alexis will be presenting our work on &lt;a href=&#34;https://www.comp.nus.edu.sg/~meel/Papers/cp19-dm.pdf&#34;&gt;unifying hashing-based approaches for discrete integration&lt;/a&gt;, and Bishwa will present on &lt;a href=&#34;https://bishwamittra.github.io/publication/irr-ghosh.pdf&#34;&lt;/a&gt; learning interpretable classifiers at &lt;a href=&#34;https://cp2019.a4cp.org/&#34;&gt;CP2019&lt;/a&gt;.</title>
      <link>https://meelgroup.github.io/talk/30092019/</link>
      <pubDate>Mon, 30 Sep 2019 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/30092019/</guid>
      <description></description>
    </item>
    
    <item>
      <title> Our &lt;a href=&#34;https://bishwamittra.github.io/publication/aaai_2020/AAAI-CiampiconiL.690.pdf&#34;&gt;paper&lt;/a&gt; on  MaxSAT-based formulation for group testing is accepted in &lt;a href=&#34;https://aaai.org/Conferences/AAAI-20/&#34;&gt;AAAI 2020&lt;/a&gt;. Authors: Lorenzo Ciampiconi, Bishwamittra Ghosh, Jonathan Scarlett and Kuldeep S. Meel</title>
      <link>https://meelgroup.github.io/talk/11112019/</link>
      <pubDate>Mon, 30 Sep 2019 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/11112019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Our Paper on &lt;a href=&#34;https://arxiv.org/abs/1909.01161&#34;&gt;embedding symbolic knowledge into Neural Networks&lt;/a&gt; is accepted to &lt;a href=&#34;https://nips.cc/&#34;&gt;NeurIPS 2019&lt;/a&gt;. Authors: Yaqi Xie, Ziwei Xu, Mohan S. Kankanhalli, Kuldeep S. Meel, Harold Soh</title>
      <link>https://meelgroup.github.io/talk/01092019/</link>
      <pubDate>Sun, 01 Sep 2019 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/01092019/</guid>
      <description></description>
    </item>
    
    <item>
      <title> Quantitative Verification of Neural Networks And Its Security Applications  </title>
      <link>https://meelgroup.github.io/publication/ccs19/</link>
      <pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/ccs19/</guid>
      <description></description>
    </item>
    
    <item>
      <title>We presented three papers at IJCAI-19. 1) The first paper explores the [phase transition behavior of conjunction of cardinality and XOR constraints](https://www.comp.nus.edu.sg/~meel/Papers/ijcai19pjm.pdf). 2) The second paper describes a radically new approach to exact counting wherein we compute estimates that are [probabilistically exact](https://www.comp.nus.edu.sg/~meel/Papers/ijcai19srsm.pdf)! 3) The third one is our invited paper on [#DNF](https://www.comp.nus.edu.sg/~meel/Papers/ijcai19msv.pdf).</title>
      <link>https://meelgroup.github.io/talk/13082019/</link>
      <pubDate>Tue, 13 Aug 2019 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/13082019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>We have released the source code of [GANAK](https://github.com/meelgroup/ganak).</title>
      <link>https://meelgroup.github.io/talk/12082019/</link>
      <pubDate>Mon, 12 Aug 2019 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/12082019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Our &lt;a href=&#34;https://arxiv.org/abs/1906.10395&#34;&gt;NPAQ framework &lt;/a&gt;focused on providing PAC guarantees for verification of Neural Networks is accepted to &lt;a href=&#34;https://www.sigsac.org/ccs/CCS2019/&#34;&gt;CCS-19&lt;/a&gt; Quoting reviewer: “This work is pioneering a new technique to solve an incredibly challenging problem, and it shows that smaller problem can be solved. I can live with that, future work can improve computational efficiency.&#34; Authors: Teodora Baluta, Shiqi Shen, Shweta Shinde, Kuldeep S. Meel, Prateek Saxena</title>
      <link>https://meelgroup.github.io/talk/30072019/</link>
      <pubDate>Tue, 30 Jul 2019 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/30072019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Dual Hashing-based Algorithms for Discrete Integration  </title>
      <link>https://meelgroup.github.io/publication/cp19/</link>
      <pubDate>Sat, 20 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/cp19/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ApproxMC</title>
      <link>https://meelgroup.github.io/project/approxmc/</link>
      <pubDate>Tue, 09 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/project/approxmc/</guid>
      <description>&lt;p&gt;ApproxMC is a hashing-based algorithm for approximate discrete integration over finite domains and provides ($\epsilon$,$\delta$) guarantees. This implementation handles the case when the function is implicitely defined by SAT formula. To the best of our knowledge, the current implementation has the best runtime performance among approximate counting algorithms. We are actively improving algorithm as well as implementation and would love to hear your feedback.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CrystalBall</title>
      <link>https://meelgroup.github.io/project/crystalball/</link>
      <pubDate>Sun, 07 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/project/crystalball/</guid>
      <description>&lt;p&gt;Boolean satisfiability is a fundamental problem in computerscience with a wide range of applications including planning, configurationmanagement, design and verification of software/hardware systems. Modern SAT solvers achieve scalability and ro-bustness with sophisticated heuristics that are challenging to understandand explain. We propose to view modern conflict-driven clause learning (CDCL) solvers as a composition of classifiers and regressors for different tasks such as branching, clause memory management, and restarting. The current version of CrystalBall focuses on deriving a classifier to keep or throw away a learned clause. In a departure from recent machine learning based techniques, CrystalBall employs supervised learning and uses extensive, multi-gigabyte data extracted from runs of a single SAT solver to perform predictive analytics. Read this 
&lt;a href=&#34;https://www.msoos.org/2019/06/crystalball-sat-solving-data-gathering-and-machine-learning/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;blog post&lt;/a&gt; for more details.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title> Interpretable Classification Rules in Relaxed Logical Form </title>
      <link>https://meelgroup.github.io/publication/ijcai19_irr/</link>
      <pubDate>Sun, 23 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/ijcai19_irr/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Our paper on &lt;a href= &#34;https://bishwamittra.github.io/publication/irr-ghosh.pdf&#34;&gt;interpretable rules expressed as relaxed-CNF&lt;/a&gt; is accepted at IJCAI workshop on XAI (Explainable Artificial Intelligence) and DSO (Data Science meets Optimization), 2019. Authors: Bishwamittra Ghosh, Dmitry Malioutov, Kuldeep S. Meel.</title>
      <link>https://meelgroup.github.io/talk/23062019/</link>
      <pubDate>Sun, 23 Jun 2019 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/23062019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>GANAK</title>
      <link>https://meelgroup.github.io/project/ganak/</link>
      <pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/project/ganak/</guid>
      <description>&lt;p&gt;Given a Boolean formula $F$, the problem of  model counting, also referred to as #SAT, seeks to compute the number of solutions of $F$. Model counting is a fundamental problem with a wide variety of applications ranging from planning, quantified information flow to probabilistic reasoning and the like. The modern #SAT solvers tend to be either based on static decomposition, dynamic decomposition, or a hybrid of the two. Despite dynamic decomposition based #SAT solvers sharing much of their architecture with SAT solvers, the core design and heuristics of dynamic decomposition-based #SAT solvers has remained constant for over a decade. In this paper, we revisit the architecture of the state-of-the-art dynamic decomposition-based #SAT tool, sharpSAT, and demonstrate that by introducing a new notion of probabilistic component caching and the usage of universal hashing for exact model counting along with the development of several new heuristics can lead to significant performance improvement over state-of-the-art model-counters. In particular, we develop GANAK, a new scalable probabilistic exact model counter that outperforms state-of-the-art exact and approximate model counters sharpSAT and ApproxMC3 respectively, both in terms of PAR-2 score and the number of instances solved. Furthermore, in our experiments, the model count returned by GANAK was equal to the exact model count for all the benchmarks. Finally, we observe that recently proposed preprocessing techniques for model counting benefit exact model counters while hurting the performance of approximate model counters.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Network Reliability Estimation in Theory and Practice </title>
      <link>https://meelgroup.github.io/publication/ress/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/ress/</guid>
      <description></description>
    </item>
    
    <item>
      <title>GANAK: A Scalable Probabilistic Exact Model Counter</title>
      <link>https://meelgroup.github.io/publication/ijcai19_ganak/</link>
      <pubDate>Tue, 21 May 2019 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/ijcai19_ganak/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Not All FPRASs are Equal: Demystifying FPRASs for DNF-Counting (Extended Abstract)  </title>
      <link>https://meelgroup.github.io/publication/ijcai19_dnfcounter/</link>
      <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/ijcai19_dnfcounter/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Phase Transition Behavior of Cardinality and XOR Constraints  </title>
      <link>https://meelgroup.github.io/publication/ijcai19_cardxor/</link>
      <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/ijcai19_cardxor/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Kuldeep recieved notification of the award of &lt;a href= &#34;https://www.nrf.gov.sg/funding-grants/nrf-fellowship-for-artificial-intelligence&#34;&gt; NRF Fellowship for AI &lt;/a&gt; for the project: Provably Verified and Explainable Probabilistic Reasoning.</title>
      <link>https://meelgroup.github.io/talk/15052019/</link>
      <pubDate>Wed, 15 May 2019 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/15052019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Two papers accepted to IJCAI.The first paper explores the phase transition behavior of conjunction of cardinality and XOR constraints. Authors: Yash Pote, Saurabh Joshi, Kuldeep Meel.&lt;br&gt; The second paper describes a radically new approach to exact counting wherein we compute estimates that are probabilistically exact! Authors: Shubham Sharma, Kuldeep Meel. Combined with our invited paper on &lt;a href= &#34;https://www.comp.nus.edu.sg/~meel/Papers/CP2018msv.pdf&#34;&gt; #DNF &lt;/a&gt;, this makes 3 papers that we will be presenting at IJCAI.</title>
      <link>https://meelgroup.github.io/talk/09052019/</link>
      <pubDate>Thu, 09 May 2019 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/09052019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Assessing Heuristic Machine Learning Explanations with Model Counting  </title>
      <link>https://meelgroup.github.io/publication/sat19_heu/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/sat19_heu/</guid>
      <description></description>
    </item>
    
    <item>
      <title>CrystalBall: Gazing in the Black Box of SAT Solving </title>
      <link>https://meelgroup.github.io/publication/sat19_cball/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/sat19_cball/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Knowledge Compilation meets Uniform Sampling</title>
      <link>https://meelgroup.github.io/post/kus/</link>
      <pubDate>Fri, 03 May 2019 11:06:17 +0530</pubDate>
      <guid>https://meelgroup.github.io/post/kus/</guid>
      <description>&lt;p&gt;This blogpost is based on our 
&lt;a href=&#34;https://www.comp.nus.edu.sg/~meel/Papers/lpar18.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;paper&lt;/a&gt; that got published in the procedings of International Conference on Logic for Programming, Artificial Intelligence and Reasoning (LPAR), 2018. The code is available 
&lt;a href=&#34;https://github.com/meelgroup/KUS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. The primary contribution of this work is marrying knowledge compilation with uniform sampling to design a new uniform sampler KUS. The main result is that KUS is able to solve more number of benchmarks than existing state-of-the-art uniform and almost-uniform samplers beating them by orders of magnitude in terms of runtime:
&lt;img src=&#34;cactus.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt;
&lt;h3&gt;Uniform Sampling&lt;/h3&gt;
***
Given a boolean formula $F$, the idea of Uniform Sampling is to generate samples from the set of solutions of $F$ called $R_F$ using a generator $\mathcal{G}$ that guarantees:
$$\forall y \in R_F, \mathsf{Pr}\left[\mathcal{G}(F) = y\right] = \frac{1}{|R_F|},$$
Uniform sampling is a fundamental problem in computer science with wide range of applications ranging from bayesian analysis to software engineering and programming languages. Jerrum, Valiant, and Vazirani observed deep relationship between model counting and uniform sampling. In particular, they showed that given access to an exact model counter, one could design a uniform generator which requires only polynomially many queries to the exact model counter. On the other hand, knowledge compilation has been emerged as a vital task wherein a logical theory is compiled into a form that allows performing probabilistic inference in polynomial time. It is well known that there is a deep connection between probabilistic inference and model counting. In this context, one wonders if the recent advances in knowledge compilation can be harnessed to design a scalable uniform sampler. The primary contribution of this work is marrying knowledge compilation with uniform sampling to design a new algorithm, KUS, that performs uniform sampling, outperforming current state-of-the-art approximately uniform and uniform samplers.
&lt;h3&gt; Knowledge Compilation and d-DNNF representation&lt;/h3&gt;
***
To deal with computational intractability of probabilistic reasoning, knowledge compilation seeks to compile a knowledge base, often represented as a propositional formula in CNF, to a target language. Thereafter, probabilistic reasoning tasks, which are often expressed as sequence of queries, are performed by querying the knowledge base in the target language. Deterministic Decomposable Negation Normal Form (d-DNNF) have emerged as a central target language in knowledge compilation community since several probabilistic reasoning tasks such as probabilistic inference, maximum a posteriori (MAP) can be answered in polynomial time in the size of d-DNNF. A boolean formula in Negation Normal Form (NNF) is said to be in d-DNNF if it satisfes the following properties:
&lt;ul&gt;
&lt;li&gt; Deterministic: We refer to an NNF as deterministic if the operands of OR in all wellformed Boolean formula in the NNF are mutually inconsistent.&lt;/li&gt;
&lt;li&gt;Decomposable: We refer to an NNF as decomposable if the operands of AND in all wellformed Boolean formula in the NNF are expressed in a mutually disjoint set of variables.&lt;/li&gt;
&lt;/ul&gt;
![alt_text](ddnnf.png)
&lt;p&gt;d-DNNF of a boolean formula $F$ represent the set of satisfying assignment $R_F$&lt;/p&gt;
&lt;h3&gt;The algorithm&lt;/h3&gt;
***
The central idea behind KUS is to first employ the state-of-the-art knowledge compilation approaches to compile a given CNF formula into d-DNNF form, and then performing only two passes over the d-DNNF representation to generate as many identically and independently distributed samples as specified by the user denoted by $s$.
![alt_text](kus.png)
&lt;p&gt;KUS takes in a CNF formula $F$ and required number of samples s and returns a set of $s$ samples such that each sample is uniformly and independently drawn from the uniform distribution over the set of solutions $R_F$. KUS first invokes a d-DNNF compiler over the formula F to obtain its d-DNNF. Then, the subroutine Annotate is invoked that annotates d-DNNF by annotating each node with a tuple consisting of the number of solutions and the set of variables in the node&amp;rsquo;s corresponding sub-formula. Then, the subroutine Sampler is invoked that returns s uniformly and independently drawn samples using the properties of d-DNNF. Finally, KUS gives random assignment to the unassigned variables for each sample in the SampleList to account for unconstrained variables that do not appear in d-DNNF by invoking the subroutine RandomAssignment.&lt;/p&gt;
&lt;h3&gt;The Results&lt;/h3&gt;
Our experiments demonstrated that KUS outperformed both SPUR and UniGen2 state-of-the-art uniform and almost-uniform samplers by a factor of up to $3$ orders of magnitude in terms of runtime in some cases while achieving a geometric speedup of $1.7\times$ and $8.3\times$ over SPUR and UniGen2 respectively. The distribution generated by KUS is statistically indistinguishable from that generated by an ideal uniform sampler. Moreover, KUS is almost oblivious to the number of samples requested. Finally, we observe that KUS can benefit from different d-DNNF compilers, therefore suggesting development of portfolio samplers in future. One of the biggest advantage of KUS is in incremental sampling--fetching multiple, relatively small-sized samples, repeatedly. The typical use case of iterative sampling can be in repeated invocation of a sampling tool until the objective (such as desired coverage or violation of property) is achieved. In incremental-sampling KUS achieves speedups of upto 3 orders of magnitude.
&lt;h3&gt;Conclusion&lt;/h3&gt;
***
&lt;ul&gt;
&lt;li&gt;In this work, we have proposed a new approach for uniform sampling that builds on breakthrough progress in knowledge compilation&lt;/li&gt;
&lt;li&gt;Experimentally we have demonstrated that KUS outperformed state-of-the-art uniform and almost-uniform samplers&lt;/li&gt;
&lt;li&gt;We believe that the success of KUS will motivate researchers in verification and knowledge compilation communities to investigate a broader set of logical forms amenable to efficient uniform generation&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>WAPS: Weighted and Projected Sampling</title>
      <link>https://meelgroup.github.io/post/waps/</link>
      <pubDate>Fri, 03 May 2019 11:06:17 +0530</pubDate>
      <guid>https://meelgroup.github.io/post/waps/</guid>
      <description>&lt;p&gt;This blogpost talks about our tool 
&lt;a href=&#34;https://github.com/meelgroup/WAPS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WAPS&lt;/a&gt;. Specifically, we will talk about how we are able to utilize the idea of sampling using knowledge compilations (d-DNNFs) from our previous work (
&lt;a href=&#34;https://www.comp.nus.edu.sg/~meel/Papers/lpar18.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KUS&lt;/a&gt;) and generalize it in order to achieve weighted and projected sampling. You can read the paper 
&lt;a href=&#34;https://www.comp.nus.edu.sg/~meel/Papers/tacas19.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; and get the tool 
&lt;a href=&#34;https://github.com/meelgroup/WAPS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. You can read the previous 
&lt;a href=&#34;https://meelgroup.github.io/post/kus/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;blog&lt;/a&gt; that describes uniform sampling using knowledge compilations, though it is not absolutely necessary for this post.&lt;/p&gt;
&lt;!-- Don&#39;t worry if you haven&#39;t read the previous blog, I am going to mention the required details here.  --&gt;
&lt;p&gt;Let&amp;rsquo;s talk about what it means to achieve weighted sampling at first.&lt;/p&gt;
&lt;h3&gt;Weighted Sampling&lt;/h3&gt;
***
Given a formula $F$ and a weight function $W$, the objective of $weighted$ sampling is to draw samples from the set of satisfying assignments of $F$ called $R\_{F}$ using a generator $\mathcal{G}^{w}(F, W)$ that ensures
 $$\forall y \in R_{F}, \mathsf{Pr}\left[\mathcal{G}^{w}(F, W) = y\right] = \frac{W(y)}{W(R\_F)}$$
&lt;!-- So, we are trying to construct a weighted probabilistic generator. --&gt;
&lt;p&gt;Intuitively, this just means that the probability of drawing a sample is proportional to its weight. In our case, we are dealing with literal-weighted weight function and the weight of an assignment is simply given by the product of weight of individual literals in the assignment. Broadly speaking, WAPS proceeds in three stages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;d-DNNF compilation&lt;/li&gt;
&lt;li&gt;Annotation&lt;/li&gt;
&lt;li&gt;Sampling.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s look at what a typical d-DNNF looks like:
&lt;img src=&#34;dDNNFexample.png&#34; alt=&#34;alt_text&#34;&gt;&lt;/p&gt;
&lt;p&gt;d-DNNF (Deterministic Decomposable Negation Normal Form) can be seen as a form of compact representation for the satisfying assignments of a given formula. One can also view it as the search space of component decomposition based DPLL procedures popularly employed in SAT solving and model counting. This perspective is helpful for Projected Sampling as you will see. Essentially, in a d-DNNF, the children of OR nodes have different (inconsistent to be precise) satisfying assignments (determinism); so, you can choose one of the children if you were to sample a satisfying assignment. On the other hand, the children of AND nodes are drawn over mutually disjoint sets of variables (decomposability); thus allowing you to simply stitch samples drawn from different children to get an overall sample.&lt;/p&gt;
&lt;p&gt;WAPS proceeds by first compiling the given CNF formula into its d-DNNF. This is followed by Annotation. The central idea in WAPS is to annotate the compiled d-DNNF in a way which allows weighted sampling by simply performing weighted bernoulli trials over d-DNNF in the Sampling phase (Refer to our 
&lt;a href=&#34;https://github.com/meelgroup/WAPS/raw/master/FullPaper.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;paper&lt;/a&gt; for more details).
The weight annotation is summarised by the figures below:&lt;/p&gt;
&lt;div class=&#34;row&#34;&gt;
  &lt;div class=&#34;col-sm-5&#34;&gt;
    &lt;img src=&#34;WAnnotate.png&#34; alt=&#34;Snow&#34; class=&#34;center&#34;&gt;
  &lt;/div&gt;
  &lt;div class=&#34;col-sm-7&#34;&gt;
    &lt;img src=&#34;WAnnotate2.png&#34; alt=&#34;Forest&#34; class=&#34;center&#34;&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In our paper, we show that this annotation scheme allows you to perform weighted sampling.&lt;/p&gt;
&lt;h3&gt; Weighted and Projected Sampling &lt;/h3&gt;
***
Given a formula $F$, a set of projecting variables $P$ and a weight function $W$, the objective of $weighted~and~projected$ sampling is to draw samples from the set of satisfying assignments of $F$ projected over $P$ called $R_{F\downarrow P}$ using a generator $\mathcal{G}^{wp}(F, P, W)$ that ensures
$$\forall y \in R\_{F\downarrow P}, \mathsf{Pr}\left[\mathcal{G}^{wp}(F, P, W) = y\right] = \frac{W(y)}{W(R\_{F\downarrow P})}$$
Intuitively, this means that samples drawn contain only a subset of variables ($P$) as opposed to all variables in the formula and these samples obey the weight distribution given by $W$ over the variables appearing in samples. This has applications in hardware verification and other places where encoding original problem into CNF generates additional Tseitin variables while weight distribution is only defined on original variables in the problem. In such cases, we are often interested in samples from variables of the original problem. 
&lt;h4&gt;Projected Sampling &lt;/h4&gt;
To achieve Projected Sampling, we aim to produce a d-DNNF which represents the set of satisfying assignments projected over a given set of projecting variables. To accomplish this, we modified Dsharp, a state of the art d-DNNF compiler to search first on projecting variables and then simply check if the residual formula is satisfiable to retain the corresponding path in d-DNNF. Notably, this technique has been used in the context of [Projected Model Counting](https://arxiv.org/abs/1507.07648) and [Quantitative Information Flow](https://link.springer.com/chapter/10.1007/978-3-642-40196-1_16) before. 
&lt;p&gt;The above technique combined with weighted sampling sums up the buildup of WAPS (Weighted and Projected Sampler).&lt;/p&gt;
&lt;h4&gt; Incremental Sampling &lt;/h4&gt;
Another interesting property as a side-effect of knowledge compilation based sampling is that incremental sampling (i.e. fetching multiple relatively short sized samples) can be performed efficiently. This is simply done by saving the compiled d-DNNF or its annotated version depending upon whether weights change in different iterations.
&lt;h3&gt; Results &lt;/h3&gt;
***
Our experiments demonstrate that WAPS is able to significantly outperform existing state-of-the-art weighted and projected sampler WeightGen, by up to $3$ orders of magnitude in terms of runtime while
achieving a geometric speedup of $296\times$. For $incremental~sampling$ i.e. fetching multiple, relatively small-sized samples, repeatedly, WAPS achieves a geometric speedup of $3.69$. Also, WAPS is almost oblivious to the number of samples requested. Empirically, the distribution generated by WAPS is statistically indistinguishable from that generated by an ideal weighted and projected sampler.  Also, while performing conditioned sampling in WAPS, we incur no extra cost in terms of runtime in most of the cases. Moreover, the performance of our knowledge compilation based sampling technique is found to be oblivious to weight distribution. Detailed data is available at [here](https://github.com/meelgroup/waps).
&lt;h3&gt; Final Thoughts &lt;/h3&gt;
***
This work has further tapped into the potential of sampling using knowledge compilations by developing procedures that allow weighted and projected sampling. We believe that the general idea of annotating knowledge compilations in different ways has even greater potential for sampling suited to a wider set of applications. Further work can also explore the development of faster sampling methods which leverage partially compiled d-DNNFs. Moreover, comparing the performance as well as functional capabilities with regard to sampling in different knowledge compilations such as SDDs(Sequential Decision Diagrams) is an interesting direction.
</description>
    </item>
    
    <item>
      <title>UniGen</title>
      <link>https://meelgroup.github.io/project/unigen/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/project/unigen/</guid>
      <description>&lt;p&gt;UniGen is a hashing-based algorithm to generate uniform samples subject to given set of constraints. The primary application of UniGen is in random stimuli generation for hardware and software verification. The current version of the tool has been developed over the years and is parallelizable without losing theoretical guarantees.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Two papers accepted to SAT 2019. The first paper introduces the first version of CrystalBall, a framework intended to allow gazing into the black box of SAT solving. Authors: Kuldeep, Mate Soos, Raghav Kulkarni.&lt;br&gt; The second paper discusses how model counting can be used to analyze explanations provided by tools such as ANCHOR. Authors: Kuldeep, Nina Narodytska, Aditya Shrotri, Alexey Ignatiev, and Joao Marques Silva.</title>
      <link>https://meelgroup.github.io/talk/22042019/</link>
      <pubDate>Mon, 22 Apr 2019 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/22042019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Barbarik</title>
      <link>https://meelgroup.github.io/project/barbarik/</link>
      <pubDate>Thu, 04 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/project/barbarik/</guid>
      <description>&lt;p&gt;The divide between the existence of sampling techniques that have strong theoretical guarantees but fail to scale and scalable techniques with weak or no theoretical guarantees mirrors the gap in software engineering between poor scalability of classical program synthesis techniques and billions of programs that are routinely used by practitioners. One bridge connecting the two extremes in the context of software engineering has been program testing. In contrast to testing for deterministic programs, where one trace is sufficient to prove the existence of a bug, in case of samplers one sample is typically not sufficient to prove non-conformity of the sampler to the desired distribution. This makes one wonder whether it is possible to design testing methodology to test whether a sampler under test generates samples close to a given distribution.&lt;/p&gt;
&lt;p&gt;We present, Barbarik, to test whether the distribution generated is ε−close or η−far from the uniform distribution. In contrast to the sampling techniques that require an exponential or sub-exponential number of samples for sampler whose support can be represented by n bits, Barbarik requires only O(1/(η − ε)4) samples.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WAPS</title>
      <link>https://meelgroup.github.io/project/waps/</link>
      <pubDate>Thu, 04 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/project/waps/</guid>
      <description>&lt;p&gt;Previous work on applying Knowledge compilation has focused on uniform sampling over all the variables. Since the constraints are written in high level languages such as Verilog, the popular CNF encoding schemes as Tseitin encoding introduces additional auxiliary variables. The resulting CNF formulas are not equivalent but equisatisfiable. In particular, for a formula $G$ specified in high level language we obtain a CNF formula F such that $G (X) = \exists Y F(X,Y)$. This makes one wonder if it is possible to extend Knowledge compilation based techniques to sample over a subset of variables. Furthermore, languages such as Verilog allow specification of weights to user-defined constraints, so there is a need to sample according to the posterior distribution. In this paper, we provide affirmative question to the above two questions: We propose KUS that samples over user defined subset of variables from posterior distribution for a given prior distribution defined over product spaces.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WAPS: Weighted and Projected Sampling </title>
      <link>https://meelgroup.github.io/publication/tacas19/</link>
      <pubDate>Thu, 04 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/tacas19/</guid>
      <description></description>
    </item>
    
    <item>
      <title>GANAK: A Scalable Probabilistic Exact Model Counter</title>
      <link>https://meelgroup.github.io/post/ganak/</link>
      <pubDate>Wed, 03 Apr 2019 11:06:17 +0530</pubDate>
      <guid>https://meelgroup.github.io/post/ganak/</guid>
      <description>&lt;p&gt;This blogpost talks about our tool 
&lt;a href=&#34;https://github.com/meelgroup/ganak&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GANAK&lt;/a&gt; that inherits current advancements in SAT solving and model counting, improves upon them and contributes new ideas, thereby outperforming state-of-the-art model counters. The source code of GANAK is available 
&lt;a href=&#34;https://github.com/meelgroup/ganak&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; and the paper is available 
&lt;a href=&#34;https://www.comp.nus.edu.sg/~meel/Papers/ijcai19srsm.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. The main result is that we can solve a lot more problems than before: &lt;img src=&#34;cactus.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s first define Model Counting.&lt;/p&gt;
&lt;h3&gt;Model Counting&lt;/h3&gt;
***
Given a Boolean formula $F$, over a set of variable $X$, model counting (aka \#SAT) seeks to compute the number of solutions of $F$. In 1979 Valiant showed that \#SAT is \#P-complete problem and in 1989 Toda proved that every problem in the polynomial hierarchy could be solved by just one call to a \#P oracle. Following types of model counting has been studied in the literature:
&lt;h4&gt;Exact Model Counting&lt;/h4&gt;
Given $F$, the problem of exact model counting is to compute the number of solutions of $F$.
&lt;h4&gt; Probabilistic Exact Model Counting &lt;/h4&gt;
Given $F$ and $\delta \in (0,1]$, probabilistic exact model counting estimates $\texttt{count}$ and guarantees that: $\mathsf{Pr}\big[|Solutions(F)| = \texttt{count}\big]\geq 1-\delta$. A recent study of different relaxations of model counting shows that probabilistic exact model counting is almost as hard as exact model counting
&lt;p&gt;Let&amp;rsquo;s see some of the applications of model counting&lt;/p&gt;
&lt;h3&gt; Applications of Model Counting &lt;/h3&gt;
***
Model counting is a fundamental problem with a wide variety of applications ranging from machine learning, quantified information flow, network reliability, planning, probabilistic reasoning, and many other related fields. For example, given a graph $G$ such that each of its edges fails with some probability and two nodes, $s$ and $t$, the problem of computing probability of existence of a path from $s$ to $t$ can be reduced to that of propositional model counting.
&lt;p&gt;Let&amp;rsquo;s talk about GANAK&lt;/p&gt;
&lt;h3&gt; GANAK &lt;/h3&gt;
***
GANAK is a scalable probabilistic exact model counter that inherits the strength of a state-of-the-art exact model counter, sharpSAT, and is equipped with the following new algorithmic advances
&lt;ul&gt;
&lt;li&gt;Probabilistic component caching (PCC)&lt;/li&gt;
&lt;li&gt;New variable branching heuristic (CSVSADS)&lt;/li&gt;
&lt;li&gt;New phase selection heuristic (PC)&lt;/li&gt;
&lt;li&gt;Independent support heuristic (IS)&lt;/li&gt;
&lt;li&gt;Exponentially decaying randomness heuristic (EDR)&lt;/li&gt;
&lt;li&gt;Learn and start over heuristic (LSO)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Detailed discussion about each of these heuristic can be found 
&lt;a href=&#34;https://www.comp.nus.edu.sg/~meel/Papers/ijcai19srsm.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt; Results &lt;/h3&gt;
***
&lt;p&gt;We evaluate the runtime performance of GANAK on $2031$ publicly available benchmarks arising from a wide range of applications of model counting. Our experiments demonstrate that GANAK performs best when all the heuristics describe in the previous section (except EDR) are enabled. GANAK outperforms state-of-the-art exact model counter, both in terms of PAR-2 score and the number of instances solved. Finally, in our experiments, the model count returned by GANAK was equal to the exact model count for all the benchmarks.&lt;/p&gt;
&lt;p&gt;We are thankful to the 
&lt;a href=&#34;https://www.nscc.sg/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;National Supercomputing Center Singapore&lt;/a&gt; for providing us computational resources to run our experiments.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kuldeep  is appointed Visiting Assistant Professor in the  &lt;a href=&#34;https://www.cse.iitb.ac.in/&#34;&gt;Department of Computer Science and Engineering&lt;/a&gt;  at IIT Bombay.</title>
      <link>https://meelgroup.github.io/talk/11022019/</link>
      <pubDate>Mon, 11 Feb 2019 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/11022019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Paper on network reliability is accepted to &lt;a href=&#34;https://www.icasp13.snu.ac.kr/&#34;&gt;The 13th International Conference on Applications of Statistics and Probability in Civil Engineering &lt;/a&gt; Authors: Roger Paredes, Leonardo Duenas-Osorio, Kuldeep S. Meel, and Moshe Y. Vardi.</title>
      <link>https://meelgroup.github.io/talk/02022019/</link>
      <pubDate>Sat, 02 Feb 2019 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/02022019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>BOSPHORUS: Bridging ANF and CNF Solvers </title>
      <link>https://meelgroup.github.io/publication/date_cscm19/</link>
      <pubDate>Fri, 01 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/date_cscm19/</guid>
      <description>&lt;p&gt;Algebraic Normal Form (ANF) and Conjunctive Normal Form (CNF) are commonly used to encode problems in Boolean algebra. ANFs are typically solved via Gröbner basis algorithms, often using more memory than is feasible; while CNFs are solved using SAT solvers, which cannot exploit the algebra of polynomials naturally. We propose a paradigm that bridges between ANF and CNF solving techniques: the techniques are applied in an iterative manner to learn facts to augment the original problems. Experiments on over 1,100 benchmarks arising from four different applications domains demonstrate that learnt facts can significantly improve runtime and enable more benchmarks to be solved.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Our paper on weighted and projected sampling is accepted at &lt;a href=&#34;https://conf.researchr.org/track/etaps-2019/tacas-2019-papers&#34;&gt;TACAS 2019&lt;/a&gt;. Authors: Shubham Sharma, Rahul Gupta, Subhajit Roy and Kuldeep S. Meel.</title>
      <link>https://meelgroup.github.io/talk/26012019/</link>
      <pubDate>Sat, 26 Jan 2019 00:00:00 +0700</pubDate>
      <guid>https://meelgroup.github.io/talk/26012019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Bosphorus: An ANF and CNF simplifier and converter</title>
      <link>https://meelgroup.github.io/post/bosphorus/</link>
      <pubDate>Sat, 05 Jan 2019 11:06:17 +0530</pubDate>
      <guid>https://meelgroup.github.io/post/bosphorus/</guid>
      <description>&lt;p&gt;We are happy to release our ANF and CNF simplifier and converter called &lt;a href=&#34;https://github.com/meelgroup/bosphorus&#34;&gt;Bosphorus&lt;/a&gt;. It has helped us break multiple real-world ciphers. It has been re-released with major work by Davin Choo &amp;amp; Kian Ming A. Chai from &lt;a href=&#34;https://www.dso.org.sg/&#34;&gt;DSO National Laboratories&lt;/a&gt; Singapore and Mate Soos &amp;amp; Kuldeep Meel from NUS. The &lt;a href=&#34;https://www.comp.nus.edu.sg/~meel/Papers/date-cscm19.pdf&#34;&gt;paper&lt;/a&gt; will be published at the &lt;a href=&#34;https://www.date-conference.com/&#34;&gt;DATE 2019&lt;/a&gt; conference.&lt;/p&gt;
&lt;h3&gt;ANFs and CNFs&lt;/h3&gt;
&lt;p&gt;Algebraic Normal Form is a form that is used by most cryptographers to describe symmetric ciphers, hash algorithms, and lately a lot of &lt;a href=&#34;https://csrc.nist.gov/projects/post-quantum-cryptography&#34;&gt;post-quantum asymmetric ciphers&lt;/a&gt;. It’s a very simple notation that basically looks like this:&lt;/p&gt;
&lt;pre class=&#34;wp-block-preformatted&#34;&gt;x1 ⊕ x2 ⊕ x3 = 0&lt;br&gt;x1 * x2 ⊕ x2 * x3 + 1 = 0&lt;/pre&gt;
&lt;p&gt;Where “⊕” represents XOR and “&lt;em&gt;” represents the AND operator. So the first line here is an XOR of binary variables x1, x2 and x3 and their XOR must be equal to 0. The second line means that “(x1 AND x2)  XOR (x2 AND x3)” must be equal to 1. This normal form allows to see a bunch of interesting things. For example, it allows us to see the so-called “maximum degree” of the set of equations, where the degree is the maximum number of variables AND-ed together in one line. The above set of equations has a maximum degree of 2, as (x1&lt;/em&gt;x2) is of degree 2. Degrees can often be a good indicator for the complexity of a problem.&lt;/p&gt;
&lt;p&gt;What’s good about ANFs is that there are a number of well-known algorithms to break problems described in them. For example, one can do &lt;a href=&#34;https://link.springer.com/content/pdf/10.1007%2F3-540-48405-1_2.pdf&#34;&gt;(re)linearization&lt;/a&gt; and Gauss-Jordan elimination, or one could run Grobner-basis algorithms such as &lt;a href=&#34;https://en.wikipedia.org/wiki/Faug%C3%A8re%27s_F4_and_F5_algorithms&#34;&gt;F4/F5&lt;/a&gt; on it. Sometimes, the ANFs can also be solved by converting them to another normal form, Conjunctive Normal Form (CNF), used by SAT solvers. The CNF normal form looks like:&lt;/p&gt;
&lt;pre class=&#34;wp-block-preformatted&#34;&gt;x1 V x2 V x3&lt;br&gt;-x1 V x3&lt;/pre&gt;
&lt;p&gt;Where x1, x2 and x3 are binary variables, “V” is the logical OR, and each line must be equal to TRUE. Using CNF is interesting, because the solvers used to solve them, &lt;a href=&#34;https://en.wikipedia.org/wiki/Boolean_satisfiability_problem&#34;&gt;SAT solvers&lt;/a&gt;, typically provide a different set of trade-offs for solving than ANF problem solvers. SAT solvers tend to use more CPU time but a lot less memory, sometimes making problems viable to solve in the “real world”. Whereas sometimes breaking of a cipher is enough to be demonstrated on paper, it also happens that one wants to break a cipher in the &lt;a href=&#34;https://twitter.com/David3141593/status/1080606827384131590&#34;&gt;real world&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Bridging and Simplifying&lt;/h3&gt;
&lt;p&gt;We believe that Bosphorus is a first of its kind system that allows ANFs to be simplified using both CNF- and ANF-based systems. It can also convert between the two normal forms and can act both as an ANF and a CNF preprocessor, like &lt;a href=&#34;http://fmv.jku.at/papers/EenBiere-SAT05.pdf&#34;&gt;SatELite&lt;/a&gt; (by Een and Biere) was for CNF. We believe this makes Bosphorus unique and also uniquely useful, especially while working on ANFs.&lt;/p&gt;
&lt;p&gt;Bosphorus uses an iterative architecture that performs the following set of steps, either until it runs out of time or until fixed point:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Replace variables and propagate constants in the ANF &lt;/li&gt;&lt;li&gt;Run limited &lt;a href=&#34;https://en.wikipedia.org/wiki/XSL_attack&#34;&gt;Extended Linarization (XL)&lt;/a&gt;  and inject back unit and binary XORs&lt;/li&gt;&lt;li&gt;Run limited &lt;a href=&#34;https://rd.springer.com/content/pdf/10.1007%2F978-3-642-34047-5_18.pdf&#34;&gt;ElimLin&lt;/a&gt;  and inject back unit and binary XORs&lt;/li&gt;&lt;li&gt;Convert to CNF, run a SAT solver for a limited number of conflicts and inject back unit and binary (and potentially longer) XORs&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;Bosphorus.png&#34; alt=&#34;alt_text&#34;&gt;&lt;/p&gt;
&lt;p&gt;In other words, the system is an iterative simplifier/preprocessor that invokes multiple reasoning systems to try to simplify the problem as much as possible. It can outright solve the system, as most of these reasoning systems are complete, but the point is to run them only to a certain limit and inject back into the ANF the easily “digestible” information. The simplified ANF can then either be output as an ANF or a CNF.&lt;/p&gt;
&lt;p&gt;Bosphorus can also take a CNF as input, perform the trivial transformation of it to ANF and then treat it as an ANF. This allows the CNF to be simplified using techniques previously unavailable to CNF systems, such as XL.&lt;/p&gt;
&lt;h3&gt;ANF to CNF Conversion&lt;/h3&gt;
&lt;p&gt;ANF-to-CNF conversion is not considered that hard, and that’s why there hasn’t been too much academic effort devoted to it. However, it’s an important step without which a lot of opportunities would be missed.&lt;/p&gt;
&lt;p&gt;The implemented system contains a pretty advanced ANF-to-CNF converter, using Karnaugh tables through &lt;a href=&#34;https://en.wikipedia.org/wiki/Espresso_heuristic_logic_minimizer&#34;&gt;Espresso&lt;/a&gt;, XOR cutting, monomial reuse, etc. It should give a pretty optimal CNF for all ANFs. So Bosphorus can be used also just as an ANF-to-CNF converter, though it’s so much more.&lt;/p&gt;
&lt;h3&gt;Final Thoughts&lt;/h3&gt;
&lt;p&gt;One of the biggest capabilities of &lt;a href=&#34;https://github.com/meelgroup/bosphorus&#34;&gt;Bosphorus&lt;/a&gt; is that it can simplify/preprocess ANF systems so more heavyweight ANF solvers can have a go at them. Its ANF simplification is so powerful, it can even help to solve some CNFs by lifting them to ANF, running the ANF simplifiers, converting it back to CNF, and solving that(!). We believe our initial results, published in the &lt;a href=&#34;https://www.comp.nus.edu.sg/~meel/Papers/date-cscm19.pdf&#34;&gt;paper&lt;/a&gt;, are very encouraging. Further, the system is in a ready-to-use state: there is a &lt;a href=&#34;https://cloud.docker.com/repository/docker/msoos/bosphorus&#34;&gt;Docker image&lt;/a&gt;, the source should build without a hitch, and there is even a precompiled Linux &lt;a href=&#34;https://github.com/meelgroup/bosphorus/releases/&#34;&gt;binary&lt;/a&gt;. We would love to hear about your experience using it.&lt;/p&gt;
&lt;p&gt;&lt;i&gt;Thanks to Karsten Nohl from &lt;a href=&#34;https://srlabs.de/&#34;&gt;Security Research Labs.&lt;/a&gt;&lt;/i&gt; This post has been adapted from &lt;a href=&#34;https://www.msoos.org/2019/01/bosphorus-an-anf-and-cnf-simplifier-and-converter/&#34;&gt;Mate&amp;rsquo;s post&lt;/a&gt; on Bosphorus.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bosphorus</title>
      <link>https://meelgroup.github.io/project/bosphorus/</link>
      <pubDate>Sat, 05 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/project/bosphorus/</guid>
      <description>&lt;p&gt;Algebraic Normal Form (ANF) and Conjunctive Normal Form (CNF) are commonly used to encode problems in Boolean algebra. ANFs are typically solved via Gröbner basis algorithms, often using more memory than is feasible; while CNFs are solved using SAT solvers, which cannot exploit the algebra of polynomials naturally. We propose a paradigm that bridges between ANF and CNF solving techniques: the techniques are applied in an iterative manner to learn facts to augment the original problems. Experiments on over 1,100 benchmarks arising from four different applications domains demonstrate that learnt facts can significantly improve runtime and enable more benchmarks to be solved.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title> IMLI: An Incremental Framework for MaxSAT-Based Learning of Interpretable Classification Rules </title>
      <link>https://meelgroup.github.io/publication/aies19/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/aies19/</guid>
      <description></description>
    </item>
    
    <item>
      <title>BIRD: Engineering an Efficient CNF-XOR SAT Solver and its Applications to Approximate Model Counting</title>
      <link>https://meelgroup.github.io/publication/aaai19_bird/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/aaai19_bird/</guid>
      <description></description>
    </item>
    
    <item>
      <title>On testing of Uniform Samplers </title>
      <link>https://meelgroup.github.io/publication/aaai19_testing/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/aaai19_testing/</guid>
      <description></description>
    </item>
    
    <item>
      <title>On the Hardness of Probabilistic Inference Relaxations</title>
      <link>https://meelgroup.github.io/publication/aaai19_hardness/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/aaai19_hardness/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ApproxMCv3: A modern approximate model counter</title>
      <link>https://meelgroup.github.io/post/approxmcv3/</link>
      <pubDate>Sun, 25 Nov 2018 11:06:17 +0530</pubDate>
      <guid>https://meelgroup.github.io/post/approxmcv3/</guid>
      <description>&lt;p&gt;ApproxMC is a scalable, approximate model counter that provides PAC (probably approximately correct) guarantees. We have been working very hard on speeding up approximate model counting for SAT and have made real progress. The research paper, accepted at AAAI-19 is available &lt;a href=&#34;https://www.comp.nus.edu.sg/~meel/Papers/aaai19-sm.pdf&#34;&gt;here&lt;/a&gt;. The code is available &lt;a href=&#34;https://github.com/meelgroup/ApproxMC&#34;&gt;here&lt;/a&gt; (release with static binary &lt;a href=&#34;https://github.com/meelgroup/ApproxMC/releases&#34;&gt;here&lt;/a&gt;). The main result is that we can solve a &lt;strong&gt;lot&lt;/strong&gt; more problems than before. The speed of solving is orders(!) of magnitude faster than the previous best system:&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;size-full wp-image-3214 aligncenter&#34; src=&#34;http://www.msoos.org/wordpress/wp-content/uploads/2018/11/Screenshot_20181125_202611.png&#34; alt=&#34;&#34; width=&#34;1202&#34; height=&#34;740&#34; srcset=&#34;https://www.msoos.org/wordpress/wp-content/uploads/2018/11/Screenshot_20181125_202611.png 1202w, https://www.msoos.org/wordpress/wp-content/uploads/2018/11/Screenshot_20181125_202611-300x185.png 300w, https://www.msoos.org/wordpress/wp-content/uploads/2018/11/Screenshot_20181125_202611-768x473.png 768w, https://www.msoos.org/wordpress/wp-content/uploads/2018/11/Screenshot_20181125_202611-1024x630.png 1024w&#34; sizes=&#34;(max-width: 1202px) 100vw, 1202px&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;Background&lt;/h3&gt;
&lt;p&gt;The idea of approximate model counting, originally &lt;a href=&#34;https://arxiv.org/pdf/1306.5726&#34;&gt;by Chakraborty, Meel and Vardi&lt;/a&gt; was a huge hit back in 2013, and many papers have followed it, trying to improve its results. All of them were basically tied to &lt;a href=&#34;https://github.com/msoos/cryptominisat&#34;&gt;CryptoMiniSat&lt;/a&gt;, the SAT solver that is maintained by Mate, as all of them relied on XOR constraints being added to the regular CNF of a typical SAT problem.&lt;/p&gt;
&lt;p&gt;So it made sense to examine what CryptoMiniSat could do to improve the speed of approximate counting. This time interestingly coincided with the removal of XORs in CryptoMiniSat. The problem was the following: A lot of new in- and preprocessing systems were being invented, mostly by Armin Biere et al, and they couldn&#39;t be added to CryptoMiniSat, because they didn&amp;#8217;t take into account XOR constraints. They handled CNF just fine, but not XORs. So XORs became a burden, and they were removed in versions 3 and 4 of CryptoMiniSat. But there was need, and this being an exciting area, the XORs had to come back.&lt;/p&gt;
&lt;h3&gt;Blast-Inprocess-Recover-Destroy&lt;/h3&gt;
&lt;p&gt;But how to both have and not have XOR constraints? Re-inventing all the algorithms for XORs was not a viable option. The solution we came up with was a rather trivial one: forget the XORs during inprocessing and recover them after. The CNF would always remain the source of truth. Extracting all the XORs after in- and preprocessing would allow us to run the Gauss-Jordan elimination on the XORs post-recovery.&lt;/p&gt;
&lt;p&gt;The process is conceptually quite easy:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Blast&lt;/strong&gt; all XORs into clauses that are in the input using intermediate variables.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Perform&lt;/strong&gt; &lt;strong&gt;pre- or inprocessing&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recover the XORs&lt;/strong&gt; from the CNF.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Run the CDCL and Gauss-Jordan&lt;/strong&gt; code at the same time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Destroy the XORs&lt;/strong&gt; and goto 2.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This system allows for everything to be in CNF form, lifting the XORs out when necessary and then forgetting them when it&amp;#8217;s convenient. All of these steps are rather trivial, except &lt;b&gt;recovery&lt;/b&gt;, as explained below.&lt;/p&gt;
&lt;h3&gt;XOR recovery&lt;/h3&gt;
&lt;p&gt;Recovering XORs sounds like a trivial task. Let&amp;#8217;s say we have the following clauses&lt;/p&gt;
&lt;pre class=&#34;wp-block-preformatted&#34;&gt;
 x1 V  x2 V  x3
-x1 V -x2 V  x3
 x1 V -x2 V -x3
-x1 V  x2 V -x3
&lt;/pre&gt;
&lt;p&gt;This is conceptually equivalent to the XOR v1+v2+v3=1. So recovering this is trivial, and has been done before, by Heule in particular, in his &lt;a href=&#34;http://www.st.ewi.tudelft.nl/sat/theses/heule_phd.pdf&#34;&gt;PhD thesis&lt;/a&gt;. The issue with the above is the following: a stronger system than the above still implies the XOR, but doesn&amp;#8217;t look the same. For example:&lt;/p&gt;
&lt;pre class=&#34;wp-block-preformatted&#34;&gt;
 x1 V  x2 V  x3
-x1 V -x2 V  x3
 x1 V -x2 V -x3
-x1 V  x2
&lt;/pre&gt;
&lt;p&gt;This is almost equivalent to the previous set of clauses, but misses a literal from one of the clauses. It still implies the XOR of course. Now what? And what to do when missing literals mean that an entire clause can be missing? The algorithm to recover XORs in such cases is non-trivial. It&amp;#8217;s non-trivial not only because of the complexity of how many combinations of missing literals and clauses there can be (it&amp;#8217;s exponential) but because one must do this work extremely fast because SAT solvers are sensitive to time.&lt;/p&gt;
&lt;p&gt;The algorithm that is in the &lt;a href=&#34;https://www.comp.nus.edu.sg/~meel/Papers/aaai19-sm.pdf&#34;&gt;paper&lt;/a&gt; explains all the bit-fiddling and cache-friendly data layout used along with some fun algorithms. We even managed to use compiler intrinsics to use target-specific assembly instructions for hamming weight calculation.&lt;/p&gt;
&lt;h3&gt;The results&lt;/h3&gt;
&lt;p&gt;The results, as shown above, speak for themselves. Problems that took thousands of seconds to solve can now be solved under 20. The reason for such incredible speedup is basically the following: CryptoMiniSatv2 was way too clunky and didn&amp;#8217;t have all the fun stuff that CryptoMiniSatv5 has, plus the XOR handling was incorrect, loosing XORs and the like. The published algorithm solves the underlying issue and allows CNF pre- and inprocessing to happen independent of XORs, thus enabling CryptoMiniSatv5 to be used in all its glory. And CryptoMiniSatv5 is &lt;em&gt;fast,&lt;/em&gt; as per the this year&amp;#8217;s SAT Competition &lt;a href=&#34;http://sat2018.forsyte.tuwien.ac.at/index.php?cat=results&#34;&gt;results&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;i&gt;We thank the &lt;a href=&#34;https://www.nscc.sg/&#34;&gt;National Supercomputing Center Singapore&lt;/a&gt;  that allowed us to run a large number of benchmarks on their machines, using at least 200 thousand CPU hours to make this paper. &lt;/i&gt;This post has been adapted from &lt;a href=&#34;https://www.msoos.org/2018/11/approxmcv3-a-modern-approximate-model-counter/&#34;&gt;Mate&#39;s post&lt;/a&gt; on ApproxMCv3.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Knowledge Compilation meets Uniform Sampling</title>
      <link>https://meelgroup.github.io/publication/lpar18/</link>
      <pubDate>Wed, 01 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/lpar18/</guid>
      <description></description>
    </item>
    
    <item>
      <title>KUS</title>
      <link>https://meelgroup.github.io/project/kus/</link>
      <pubDate>Wed, 01 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/project/kus/</guid>
      <description>&lt;p&gt;Uniform sampling has drawn diverse applications in programming languages and software engineering, like in constrained-random verification (CRV), constrained-fuzzing and bug synthesis. The effectiveness of these applications depend on the uniformity of test stimuli generated from a given set of constraints. Despite significant progress over the past few years, the performance of the state of the art techniques still falls short of those of heuristic methods employed in the industry which sacrifice either uniformity or scalability when generating stimuli. In this paper, we propose a new approach to the uniform generation that builds on recent progress in knowledge compilation. The primary contribution of this paper is marrying knowledge compilation with uniform sampling: our algorithm, KUS, employs the state-of-the-art knowledge compilers to first compile constraints into d-DNNF form, and then, generates samples by making two passes over the compiled representation. We show that KUS is able to significantly outperform existing state-of-the-art algorithms, SPUR and UniGen2, by up to 3 orders of magnitude in terms of runtime while achieving a geometric speedup of $1.7\times$ and $8.3\times$ over SPUR and UniGen2 respectively. Also, KUS achieves a lower PAR-2 score, around $0.82\times$ that of SPUR and $0.38\times$ that of UniGen2. Furthermore, KUS achieves speedups of up to 3 orders of magnitude for incremental sampling. The distribution generated by KUS is statistically indistinguishable from that generated by an ideal uniform sampler. Moreover, KUS is almost oblivious to the number of samples requested.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Not All FPRASs are Equal: Demystifying FPRASs for DNF-Counting </title>
      <link>https://meelgroup.github.io/publication/cp18/</link>
      <pubDate>Wed, 01 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/cp18/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Terms</title>
      <link>https://meelgroup.github.io/terms/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0100</pubDate>
      <guid>https://meelgroup.github.io/terms/</guid>
      <description>&lt;p&gt;Add your terms here and set &lt;code&gt;draft: false&lt;/code&gt; to publish it. Otherwise, delete this file if you don&amp;rsquo;t need it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MLIC: A MaxSAT-Based framework for learning interpretable classification rules</title>
      <link>https://meelgroup.github.io/publication/mm18/</link>
      <pubDate>Sat, 02 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/mm18/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Scalable Approximation of Quantitative Information Flow in Programs</title>
      <link>https://meelgroup.github.io/publication/vmcai18/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/vmcai18/</guid>
      <description></description>
    </item>
    
    <item>
      <title>On Hashing-Based Approaches to Approximate DNF-Counting </title>
      <link>https://meelgroup.github.io/publication/fsttcs17/</link>
      <pubDate>Fri, 01 Dec 2017 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/fsttcs17/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Constrained Counting and Sampling: Bridging the Gap between Theory and Practice </title>
      <link>https://meelgroup.github.io/publication/meel-phdthesis/</link>
      <pubDate>Fri, 29 Sep 2017 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/meel-phdthesis/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Hard Problems Are Almost Everywhere For Random CNF-XOR Formulas  </title>
      <link>https://meelgroup.github.io/publication/ijcai17/</link>
      <pubDate>Tue, 01 Aug 2017 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/ijcai17/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Counting-Based Reliability Estimation for Power-Transmission Grids</title>
      <link>https://meelgroup.github.io/publication/aaai17/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/aaai17/</guid>
      <description></description>
    </item>
    
    <item>
      <title>MIS</title>
      <link>https://meelgroup.github.io/project/mis/</link>
      <pubDate>Mon, 05 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/project/mis/</guid>
      <description>&lt;p&gt;MIS computes minimal Independent Support for a given CNF formula. The implementation is based on MIS algorithm proposed in our CP&amp;rsquo;15 paper, which also won the Best Student Paper Award.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On Computing Minimal Independent Support and Its Applications to Sampling and Counting </title>
      <link>https://meelgroup.github.io/publication/immv16/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/immv16/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Algorithmic Improvements in Approximate Counting for Probabilistic Inference: From Linear to Logarithmic SAT Calls  </title>
      <link>https://meelgroup.github.io/publication/ijcai16_counting/</link>
      <pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/ijcai16_counting/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Combining the k-CNF and XOR Phase-Transitions </title>
      <link>https://meelgroup.github.io/publication/ijcai16_cnfxor/</link>
      <pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/ijcai16_cnfxor/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Approximate Probabilistic Inference via Word-Level Counting </title>
      <link>https://meelgroup.github.io/publication/aaai16/</link>
      <pubDate>Wed, 01 Jun 2016 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/aaai16/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Automatic Data Layout Generation and Kernel Mapping for CPU&#43;GPU Architectures </title>
      <link>https://meelgroup.github.io/publication/cc16/</link>
      <pubDate>Tue, 01 Mar 2016 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/cc16/</guid>
      <description></description>
    </item>
    
    <item>
      <title>SMTApproxMC</title>
      <link>https://meelgroup.github.io/project/smtapproxmc/</link>
      <pubDate>Fri, 12 Feb 2016 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/project/smtapproxmc/</guid>
      <description>&lt;p&gt;SMTApproxMC is an approximate model counter for Bitvector theory. Given a set of constraints and weight function over assignments, WeightGen outputs samples that satisfy constraints according to weight function.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Constrained Sampling and Counting: Universal Hashing meets SAT Solving</title>
      <link>https://meelgroup.github.io/publication/bnp16/</link>
      <pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/bnp16/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Design and Verification of Distributed Phasers</title>
      <link>https://meelgroup.github.io/publication/pact15/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/pact15/</guid>
      <description></description>
    </item>
    
    <item>
      <title>On Computing Minimal Independent Support and Its Applications to Sampling and Counting </title>
      <link>https://meelgroup.github.io/publication/cp15/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/cp15/</guid>
      <description></description>
    </item>
    
    <item>
      <title>From Weighted to Unweighted Model Counting </title>
      <link>https://meelgroup.github.io/publication/ijcai15/</link>
      <pubDate>Wed, 01 Jul 2015 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/ijcai15/</guid>
      <description></description>
    </item>
    
    <item>
      <title>On Parallel Scalable Uniform SAT Witness Generator</title>
      <link>https://meelgroup.github.io/publication/tacas15/</link>
      <pubDate>Wed, 01 Apr 2015 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/tacas15/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ADHA: Automatic Data layout framework for Heterogeneous Architectures</title>
      <link>https://meelgroup.github.io/publication/mmbs14/</link>
      <pubDate>Fri, 01 Aug 2014 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/mmbs14/</guid>
      <description></description>
    </item>
    
    <item>
      <title>WeightGen</title>
      <link>https://meelgroup.github.io/project/weightgen/</link>
      <pubDate>Sun, 27 Jul 2014 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/project/weightgen/</guid>
      <description>&lt;p&gt;WeightGen is hashing-based approximate weighted sampling for weighted CNF formulas. Given a set of constraints and weight function over assignments, WeightGen outputs samples that satisfy constraints according to weight function.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WeightMC</title>
      <link>https://meelgroup.github.io/project/weightmc/</link>
      <pubDate>Sun, 27 Jul 2014 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/project/weightmc/</guid>
      <description>&lt;p&gt;WeightMC is hashing-based algorithm for weighted counting (discrete integration) over Boolean domains. It takes a CNF formula and weight function as inputs and returns weighted count. In contrast to previous attempts to develop weighted counting that rely on use of Optimization oracles, WeightMC only uses feasibility oracle. A simple reworking of this algorithm was used by Belle et al to predicate delays in UK transportation network.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Distribution-Aware Sampling and Weighted Model Counting for SAT</title>
      <link>https://meelgroup.github.io/publication/aaai14/</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/aaai14/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Balancing Scalability and Uniformity in SAT-Witness Generator </title>
      <link>https://meelgroup.github.io/publication/dac14/</link>
      <pubDate>Sun, 01 Jun 2014 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/dac14/</guid>
      <description></description>
    </item>
    
    <item>
      <title>1-CARD-XOR</title>
      <link>https://meelgroup.github.io/project/1cardxor/</link>
      <pubDate>Fri, 10 Jan 2014 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/project/1cardxor/</guid>
      <description>&lt;p&gt;The runtime performance of modern SAT solvers is deeply connected to the phase transition behavior of CNF formulas. While CNF solving has witnessed significant runtime improvement over the past two decades, the same does not hold for several other classes such as the conjunction of cardinality and XOR constraints, denoted as CARD-XOR formulas. The problem of determining satisfiability of CARDXOR formulas is a fundamental problem with wide variety of applications ranging from discrete integration in the field of artificial intelligence to maximum likelihood decoding in coding theory. The runtime behavior of random CARD-XOR formulas is unexplored in prior work. In this paper, we present the first rigorous empirical study to characterize the runtime behavior of 1-CARD-XOR formulas. We show empirical evidence of a surprising phase-transition that follows a non-linear tradeoff between CARD and XOR constraints.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Scalable Approximate Model Counter </title>
      <link>https://meelgroup.github.io/publication/cp13/</link>
      <pubDate>Sun, 01 Sep 2013 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/cp13/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Scalable and Nearly Uniform Generator of SAT Witnesses</title>
      <link>https://meelgroup.github.io/publication/cav13/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      <guid>https://meelgroup.github.io/publication/cav13/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
